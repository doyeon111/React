* useReducer란?
	- 컴포넌트 내부에 새로운 State를 생성하는 React Hook
	- 모든 useState는 useReduce로 대체 가능
  - 상태 관리 코드를 컴포넌트 외부로 분리할 수 있음
  
=======================================================================

* 최적화란?
  - 웹 서비스의 성능을 개선하는 모든 행위를 일컫음.
  - 아주 단순한 것 부터 아주 어려운 방법까지 매우 다양함.

  1) 일반적인 웹 서비스 최적화 방법
    - 서버의 응답속도 개선
    - 이미지, 폰트, 코드 파일 등의 정적 파일 로딩 개선
    - 불필요한 네트워크 요청 줄임
    
  2) React App 내부의 최적화 방법
    - 컴포넌트 내부의 불 필요한 연산 방지
    - 컴포넌트 내부의 불 필요한 함수 재생성 방지
    - 컴포넌트의 불 필요한 리렌더링 방지

=======================================================================

* useMemo란?
  - "메모이제이션" 기법을 기반으로 불 필요한 연산을 최적화하는 리액트 훅
  - 메모이제이션: 기억해두기, 메모해두기 라는 뜻
  - 최초의 한 번 연산을 수행하여 나온 결과값을 메모리에 저장하여 
    반복적으로 수행되는 동일한 연산들을 불필요하게 다시 수행하지 않도록 함

=======================================================================

* React.memo란?
  - 컴포넌트를 인수로 받아, 최적화된 컴포넌트로 만들어 반환
  - ex) const MemoizedComponent = memo(Component)
  - MemoizedComponent는 부모 컴포넌트가 리렌더링 되더라도 자신이 받는 props가 바뀌지 않으면
    다시는 리렌더링이 발생하지 않도록 메모이제이션 되기 때문에 불필요한 리렌더링이 방지되어서 
    자동으로 최적화가 이루어짐.

=======================================================================

* React Context란?
  - 컴포넌트간의 데이터를 전달하는 또 다른 방법
  - 기존의 Props가 가지고 있던 단점을 해결할 수 있음. => Props Drilling 해결
  - props는 부모 -> 자식 으로만 데이터를 전달할 수 있었음
  - 그리고 props는 App -> childA -> childB 로 전달할 경우 App -> childB로 다이렉트로 전달 불가능
  - Context는 데이터 보관소(객체)

=======================================================================

* React Context란?
  - 컴포넌트간의 데이터를 전달하는 또 다른 방법
  - 기존의 Props가 가지고 있던 단점을 해결할 수 있음. => Props Drilling 해결
  - props는 부모 -> 자식 으로만 데이터를 전달할 수 있었음
  - 그리고 props는 App -> childA -> childB 로 전달할 경우 App -> childB로 다이렉트로 전달 불가능
  - Context는 데이터 보관소(객체)

=======================================================================